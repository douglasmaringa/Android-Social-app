{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\DOUGLAS\\\\Desktop\\\\ReactNative\\\\letsgo\\\\lets-go\\\\node_modules\\\\react-native-image-slider-box\\\\dist\\\\SliderBox.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport TouchableHighlight from \"react-native-web/dist/exports/TouchableHighlight\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport Carousel, { Pagination } from \"react-native-snap-carousel\";\nimport styles from \"./SliderBox.style\";\nvar width = Dimensions.get(\"window\").width;\nexport var SliderBox = function (_Component) {\n  _inherits(SliderBox, _Component);\n\n  var _super = _createSuper(SliderBox);\n\n  function SliderBox(props) {\n    var _this;\n\n    _classCallCheck(this, SliderBox);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      currentImage: 0,\n      loading: []\n    };\n    _this.onCurrentImagePressedHandler = _this.onCurrentImagePressedHandler.bind(_assertThisInitialized(_this));\n    _this.onSnap = _this.onSnap.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(SliderBox, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var a = _toConsumableArray(Array(this.props.images.length).keys()).map(function (i) {\n        return false;\n      });\n    }\n  }, {\n    key: \"onCurrentImagePressedHandler\",\n    value: function onCurrentImagePressedHandler() {\n      if (this.props.onCurrentImagePressed) {\n        this.props.onCurrentImagePressed(this.state.currentImage);\n      }\n    }\n  }, {\n    key: \"onSnap\",\n    value: function onSnap(index) {\n      var _this2 = this;\n\n      var currentImageEmitter = this.props.currentImageEmitter;\n      this.setState({\n        currentImage: index\n      }, function () {\n        if (currentImageEmitter) currentImageEmitter(_this2.state.currentImage);\n      });\n    }\n  }, {\n    key: \"_renderItem\",\n    value: function _renderItem(_ref) {\n      var _this3 = this;\n\n      var item = _ref.item,\n          index = _ref.index;\n      var _this$props = this.props,\n          ImageComponent = _this$props.ImageComponent,\n          _this$props$ImageComp = _this$props.ImageComponentStyle,\n          ImageComponentStyle = _this$props$ImageComp === void 0 ? {} : _this$props$ImageComp,\n          sliderBoxHeight = _this$props.sliderBoxHeight,\n          disableOnPress = _this$props.disableOnPress,\n          resizeMethod = _this$props.resizeMethod,\n          resizeMode = _this$props.resizeMode,\n          _this$props$imageLoad = _this$props.imageLoadingColor,\n          imageLoadingColor = _this$props$imageLoad === void 0 ? \"#E91E63\" : _this$props$imageLoad;\n      return React.createElement(View, {\n        style: {\n          position: \"relative\",\n          justifyContent: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 7\n        }\n      }, React.createElement(TouchableHighlight, {\n        key: index,\n        onPress: function onPress() {\n          return !disableOnPress && _this3.onCurrentImagePressedHandler();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 9\n        }\n      }, React.createElement(ImageComponent, _extends({\n        style: [{\n          width: \"100%\",\n          height: sliderBoxHeight || 200,\n          alignSelf: \"center\"\n        }, ImageComponentStyle],\n        source: typeof item === \"string\" ? {\n          uri: item\n        } : item,\n        resizeMethod: resizeMethod || \"resize\",\n        resizeMode: resizeMode || \"cover\",\n        onLoad: function onLoad() {},\n        onLoadStart: function onLoadStart() {},\n        onLoadEnd: function onLoadEnd() {\n          var t = _this3.state.loading;\n          t[index] = true;\n\n          _this3.setState({\n            loading: t\n          });\n        }\n      }, this.props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }\n      }))), !this.state.loading[index] && React.createElement(ActivityIndicator, {\n        size: \"large\",\n        color: imageLoadingColor,\n        style: {\n          position: \"absolute\",\n          alignSelf: \"center\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }\n      }));\n    }\n  }, {\n    key: \"pagination\",\n    get: function get() {\n      var currentImage = this.state.currentImage;\n      var _this$props2 = this.props,\n          images = _this$props2.images,\n          dotStyle = _this$props2.dotStyle,\n          dotColor = _this$props2.dotColor,\n          inactiveDotColor = _this$props2.inactiveDotColor,\n          paginationBoxStyle = _this$props2.paginationBoxStyle,\n          paginationBoxVerticalPadding = _this$props2.paginationBoxVerticalPadding;\n      return React.createElement(Pagination, _extends({\n        borderRadius: 2,\n        dotsLength: images.length,\n        activeDotIndex: currentImage,\n        dotStyle: dotStyle || styles.dotStyle,\n        dotColor: dotColor || colors.dotColors,\n        inactiveDotColor: inactiveDotColor || colors.white,\n        inactiveDotScale: 0.8,\n        carouselRef: this._ref,\n        inactiveDotOpacity: 0.8,\n        tappableDots: !!this._ref,\n        containerStyle: [styles.paginationBoxStyle, paginationBoxVerticalPadding ? {\n          paddingVertical: paginationBoxVerticalPadding\n        } : {}, paginationBoxStyle ? paginationBoxStyle : {}]\n      }, this.props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 7\n        }\n      }));\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var _this$props3 = this.props,\n          images = _this$props3.images,\n          circleLoop = _this$props3.circleLoop,\n          autoplay = _this$props3.autoplay,\n          parentWidth = _this$props3.parentWidth,\n          loopClonesPerSide = _this$props3.loopClonesPerSide;\n      return React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 7\n        }\n      }, React.createElement(Carousel, _extends({\n        layout: \"default\",\n        data: images,\n        ref: function ref(c) {\n          return _this4._ref = c;\n        },\n        loop: circleLoop || false,\n        enableSnap: true,\n        autoplay: autoplay || false,\n        itemWidth: parentWidth || width,\n        sliderWidth: parentWidth || width,\n        loopClonesPerSide: loopClonesPerSide || 5,\n        renderItem: function renderItem(item) {\n          return _this4._renderItem(item);\n        },\n        onSnapToItem: function onSnapToItem(index) {\n          return _this4.onSnap(index);\n        }\n      }, this.props, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 9\n        }\n      })), images.length > 1 && this.pagination);\n    }\n  }]);\n\n  return SliderBox;\n}(Component);\nvar colors = {\n  dotColors: \"#BDBDBD\",\n  white: \"#FFFFFF\"\n};\nSliderBox.defaultProps = {\n  ImageComponent: Image\n};","map":{"version":3,"sources":["C:/Users/DOUGLAS/Desktop/ReactNative/letsgo/lets-go/node_modules/react-native-image-slider-box/dist/SliderBox.js"],"names":["React","Component","Carousel","Pagination","styles","width","Dimensions","get","SliderBox","props","state","currentImage","loading","onCurrentImagePressedHandler","bind","onSnap","a","Array","images","length","keys","map","i","onCurrentImagePressed","index","currentImageEmitter","setState","item","ImageComponent","ImageComponentStyle","sliderBoxHeight","disableOnPress","resizeMethod","resizeMode","imageLoadingColor","position","justifyContent","height","alignSelf","uri","t","dotStyle","dotColor","inactiveDotColor","paginationBoxStyle","paginationBoxVerticalPadding","colors","dotColors","white","_ref","paddingVertical","circleLoop","autoplay","parentWidth","loopClonesPerSide","c","_renderItem","pagination","defaultProps","Image"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  View,\n  Image,\n  ActivityIndicator,\n  TouchableHighlight,\n  Dimensions\n} from \"react-native\";\n\nimport Carousel, { Pagination } from \"react-native-snap-carousel\"; //Thank From distributer(s) of this lib\nimport styles from \"./SliderBox.style\";\n\n// -------------------Props---------------------\n// images\n// onCurrentImagePressed\n// sliderBoxHeight\n// parentWidth\n// dotColor\n// inactiveDotColor\n// dotStyle\n// paginationBoxVerticalPadding\n// circleLoop\n// autoplay\n// ImageComponent\n// paginationBoxStyle\n// resizeMethod\n// resizeMode\n// ImageComponentStyle,\n// imageLoadingColor = \"#E91E63\"\n\nconst width = Dimensions.get(\"window\").width;\n\nexport class SliderBox extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentImage: 0,\n      loading: []\n    };\n    this.onCurrentImagePressedHandler = this.onCurrentImagePressedHandler.bind(\n      this\n    );\n    this.onSnap = this.onSnap.bind(this);\n  }\n  componentDidMount() {\n    let a = [...Array(this.props.images.length).keys()].map(i => false);\n  }\n  onCurrentImagePressedHandler() {\n    if (this.props.onCurrentImagePressed) {\n      this.props.onCurrentImagePressed(this.state.currentImage);\n    }\n  }\n\n  onSnap(index) {\n    const { currentImageEmitter } = this.props;\n    this.setState({ currentImage: index }, () => {\n      if (currentImageEmitter) currentImageEmitter(this.state.currentImage);\n    });\n  }\n\n  _renderItem({ item, index }) {\n    const {\n      ImageComponent,\n      ImageComponentStyle = {},\n      sliderBoxHeight,\n      disableOnPress,\n      resizeMethod,\n      resizeMode,\n      imageLoadingColor = \"#E91E63\"\n    } = this.props;\n    return (\n      <View\n        style={{\n          position: \"relative\",\n          justifyContent: \"center\"\n        }}\n      >\n        <TouchableHighlight\n          key={index}\n          onPress={() => !disableOnPress && this.onCurrentImagePressedHandler()}\n        >\n          <ImageComponent\n            style={[\n              {\n                width: \"100%\",\n                height: sliderBoxHeight || 200,\n                alignSelf: \"center\"\n              },\n              ImageComponentStyle\n            ]}\n            source={typeof item === \"string\" ? { uri: item } : item}\n            resizeMethod={resizeMethod || \"resize\"}\n            resizeMode={resizeMode || \"cover\"}\n            onLoad={() => {}}\n            onLoadStart={() => {}}\n            onLoadEnd={() => {\n              let t = this.state.loading;\n              t[index] = true;\n              this.setState({ loading: t });\n            }}\n            {...this.props}\n          />\n        </TouchableHighlight>\n        {!this.state.loading[index] && (\n          <ActivityIndicator\n            size=\"large\"\n            color={imageLoadingColor}\n            style={{\n              position: \"absolute\",\n              alignSelf: \"center\"\n            }}\n          />\n        )}\n      </View>\n    );\n  }\n\n  get pagination() {\n    const { currentImage } = this.state;\n    const {\n      images,\n      dotStyle,\n      dotColor,\n      inactiveDotColor,\n      paginationBoxStyle,\n      paginationBoxVerticalPadding\n    } = this.props;\n    return (\n      <Pagination\n        borderRadius={2}\n        dotsLength={images.length}\n        activeDotIndex={currentImage}\n        dotStyle={dotStyle || styles.dotStyle}\n        dotColor={dotColor || colors.dotColors}\n        inactiveDotColor={inactiveDotColor || colors.white}\n        inactiveDotScale={0.8}\n        carouselRef={this._ref}\n        inactiveDotOpacity={0.8}\n        tappableDots={!!this._ref}\n        containerStyle={[\n          styles.paginationBoxStyle,\n          paginationBoxVerticalPadding\n            ? { paddingVertical: paginationBoxVerticalPadding }\n            : {},\n          paginationBoxStyle ? paginationBoxStyle : {}\n        ]}\n        {...this.props}\n      />\n    );\n  }\n\n  render() {\n    const {\n      images,\n      circleLoop,\n      autoplay,\n      parentWidth,\n      loopClonesPerSide\n    } = this.props;\n    return (\n      <View>\n        <Carousel\n          layout={\"default\"}\n          data={images}\n          ref={c => (this._ref = c)}\n          loop={circleLoop || false}\n          enableSnap={true}\n          autoplay={autoplay || false}\n          itemWidth={parentWidth || width}\n          sliderWidth={parentWidth || width}\n          loopClonesPerSide={loopClonesPerSide || 5}\n          renderItem={item => this._renderItem(item)}\n          onSnapToItem={index => this.onSnap(index)}\n          {...this.props}\n        />\n        {images.length > 1 && this.pagination}\n      </View>\n    );\n  }\n}\n\nconst colors = {\n  dotColors: \"#BDBDBD\",\n  white: \"#FFFFFF\"\n};\n\nSliderBox.defaultProps = {\n  ImageComponent: Image\n};\n"]},"metadata":{},"sourceType":"module"}