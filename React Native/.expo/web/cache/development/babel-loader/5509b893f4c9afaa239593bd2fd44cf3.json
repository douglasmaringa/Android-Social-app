{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport var initialState = {\n  basket: [],\n  user: null,\n  single: \"\"\n};\nexport var getBasketTotal = function getBasketTotal(basket) {\n  return basket == null ? void 0 : basket.reduce(function (sum, item) {\n    return sum + item.price;\n  }, 0);\n};\n\nvar reducer = function reducer(state, action) {\n  switch (action.type) {\n    case \"ADD_TO_BASKET\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        basket: [].concat(_toConsumableArray(state.basket), [action.item])\n      });\n\n    case \"EMPTY_BASKET\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        basket: []\n      });\n\n    case \"REMOVE_FROM_BASKET\":\n      var index = state.basket.findIndex(function (basketItem) {\n        return basketItem.id === action.id;\n      });\n\n      var newBasket = _toConsumableArray(state.basket);\n\n      if (index >= 0) {\n        newBasket.splice(index, 1);\n      } else {\n        console.warn(\"Can't remove product (id: \" + action.id + \" as it is not in basket!)\");\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        basket: newBasket\n      });\n\n    case \"SET_USER\":\n      return _objectSpread(_objectSpread({}, state), {}, {\n        user: action.user\n      });\n\n    case \"Set_Single\":\n      return {\n        single: action.item\n      };\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/Users/DOUGLAS/Desktop/ReactNative/letsgo/lets-go/reducer.js"],"names":["initialState","basket","user","single","getBasketTotal","reduce","sum","item","price","reducer","state","action","type","index","findIndex","basketItem","id","newBasket","splice","console","warn"],"mappings":";;;;;;;AAAA,OAAO,IAAMA,YAAY,GAAG;AAC1BC,EAAAA,MAAM,EAAE,EADkB;AAE1BC,EAAAA,IAAI,EAAE,IAFoB;AAG1BC,EAAAA,MAAM,EAAC;AAHmB,CAArB;AAOP,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACH,MAAD;AAAA,SAC5BA,MAD4B,oBAC5BA,MAAM,CAAEI,MAAR,CAAe,UAACC,GAAD,EAAMC,IAAN;AAAA,WAAeD,GAAG,GAAGC,IAAI,CAACC,KAA1B;AAAA,GAAf,EAA+C,CAA/C,CAD4B;AAAA,CAAvB;;AAGP,IAAMC,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD,EAAQC,MAAR,EAAmB;AACjC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAK,eAAL;AACE,6CACKF,KADL;AAEET,QAAAA,MAAM,+BAAMS,KAAK,CAACT,MAAZ,IAAoBU,MAAM,CAACJ,IAA3B;AAFR;;AAKF,SAAK,cAAL;AACE,6CACKG,KADL;AAEET,QAAAA,MAAM,EAAE;AAFV;;AAKF,SAAK,oBAAL;AACE,UAAMY,KAAK,GAAGH,KAAK,CAACT,MAAN,CAAaa,SAAb,CACZ,UAACC,UAAD;AAAA,eAAgBA,UAAU,CAACC,EAAX,KAAkBL,MAAM,CAACK,EAAzC;AAAA,OADY,CAAd;;AAGA,UAAIC,SAAS,sBAAOP,KAAK,CAACT,MAAb,CAAb;;AAEA,UAAIY,KAAK,IAAI,CAAb,EAAgB;AACdI,QAAAA,SAAS,CAACC,MAAV,CAAiBL,KAAjB,EAAwB,CAAxB;AACD,OAFD,MAEO;AACLM,QAAAA,OAAO,CAACC,IAAR,gCAC+BT,MAAM,CAACK,EADtC;AAGD;;AAED,6CACKN,KADL;AAEET,QAAAA,MAAM,EAAEgB;AAFV;;AAKF,SAAK,UAAL;AACE,6CACKP,KADL;AAEER,QAAAA,IAAI,EAAES,MAAM,CAACT;AAFf;;AAQD,SAAK,YAAL;AACC,aAAO;AAELC,QAAAA,MAAM,EAAEQ,MAAM,CAACJ;AAFV,OAAP;;AAIF;AACE,aAAOG,KAAP;AA/CJ;AAmDD,CApDD;;AAsDA,eAAeD,OAAf","sourcesContent":["export const initialState = {\n  basket: [],\n  user: null,\n  single:\"\",\n};\n\n// Selector\nexport const getBasketTotal = (basket) =>\n  basket?.reduce((sum, item) => sum + item.price,0);\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"ADD_TO_BASKET\":\n      return {\n        ...state,\n        basket: [...state.basket, action.item],\n      };\n\n    case \"EMPTY_BASKET\":\n      return {\n        ...state,\n        basket: [],\n      };\n\n    case \"REMOVE_FROM_BASKET\":\n      const index = state.basket.findIndex(\n        (basketItem) => basketItem.id === action.id\n      );\n      let newBasket = [...state.basket];\n\n      if (index >= 0) {\n        newBasket.splice(index, 1);\n      } else {\n        console.warn(\n          `Can't remove product (id: ${action.id} as it is not in basket!)`\n        );\n      }\n\n      return {\n        ...state,\n        basket: newBasket,\n      };\n\n    case \"SET_USER\":\n      return {\n        ...state,\n        user: action.user,\n      };\n\n    //default:\n     // return state;\n\n     case \"Set_Single\":\n      return {\n        \n        single: action.item,\n      };\n    default:\n      return state;\n  \n  }\n  \n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}