{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _extraReducers;\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\nimport { AsyncStorage } from \"react-native-web/dist/index\";\nexport var getUsers = createAsyncThunk(\"users/getUsers\", function _callee(_ref, dispatch, getState) {\n  var username, password;\n  return _regeneratorRuntime.async(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          username = _ref.username, password = _ref.password;\n          console.log(username);\n          _context.prev = 2;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(axios.post(\"http://localhost:8800/api/auth/login\", {\n            email: username,\n            password: password\n          }));\n\n        case 5:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](2);\n          return _context.abrupt(\"return\", _context.t0);\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, [[2, 8]], Promise);\n});\nvar initialUser = AsyncStorage.getItem('user') ? JSON.parse(AsyncStorage.getItem('user')) : null;\nvar initialId = AsyncStorage.getItem('id') ? JSON.parse(AsyncStorage.getItem('id')) : null;\nvar initialUsername = AsyncStorage.getItem('username') ? JSON.parse(AsyncStorage.getItem('username')) : null;\nvar usersSlice = createSlice({\n  name: \"user\",\n  initialState: {\n    users: [],\n    status: null,\n    email: initialUser,\n    id: initialId,\n    username: initialUsername\n  },\n  reducers: {\n    logoutSuccess: function logoutSuccess(state, action) {\n      state.email = null;\n      state.users = [];\n      AsyncStorage.removeItem('user');\n      AsyncStorage.removeItem('id');\n      AsyncStorage.removeItem('username');\n    }\n  },\n  extraReducers: (_extraReducers = {}, _defineProperty(_extraReducers, getUsers.pending, function (state, action) {\n    state.status = \"loading\";\n  }), _defineProperty(_extraReducers, getUsers.fulfilled, function (state, action) {\n    state.status = \"success\";\n    state.users = action.payload;\n\n    if (action.payload.status == 200) {\n      AsyncStorage.setItem('user', JSON.stringify(action.payload.data.email));\n      AsyncStorage.setItem('id', JSON.stringify(action.payload.data._id));\n      AsyncStorage.setItem('username', JSON.stringify(action.payload.data.username));\n    } else {\n      alert(\"wrong credentials\");\n    }\n  }), _defineProperty(_extraReducers, getUsers.rejected, function (state, action) {\n    state.status = \"failed\";\n  }), _extraReducers)\n});\nvar logoutSuccess = usersSlice.actions.logoutSuccess;\nexport var logout = function logout() {\n  return function _callee2(dispatch) {\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            alert(\"logout sucees\");\n            return _context2.abrupt(\"return\", dispatch(logoutSuccess()));\n\n          case 5:\n            _context2.prev = 5;\n            _context2.t0 = _context2[\"catch\"](0);\n            return _context2.abrupt(\"return\", console.error(_context2.t0.message));\n\n          case 8:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 5]], Promise);\n  };\n};\nexport default usersSlice.reducer;","map":{"version":3,"sources":["C:/Users/DOUGLAS/Desktop/ReactNative/letsgo/lets-go/slice/UserSlice.js"],"names":["createSlice","createAsyncThunk","axios","AsyncStorage","getUsers","dispatch","getState","username","password","console","log","post","email","initialUser","getItem","JSON","parse","initialId","initialUsername","usersSlice","name","initialState","users","status","id","reducers","logoutSuccess","state","action","removeItem","extraReducers","pending","fulfilled","payload","setItem","stringify","data","_id","alert","rejected","actions","logout","error","message","reducer"],"mappings":";;;;;AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,OAAOC,KAAP,MAAkB,OAAlB;SACSC,Y;AAGT,OAAO,IAAMC,QAAQ,GAAGH,gBAAgB,CACtC,gBADsC,EAEtC,uBAA2BI,QAA3B,EAAqCC,QAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAQC,UAAAA,QAAR,QAAQA,QAAR,EAAiBC,QAAjB,QAAiBA,QAAjB;AACCC,UAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AADD;AAAA;AAAA,2CAGeL,KAAK,CAACS,IAAN,CAAW,sCAAX,EAAkD;AAC7DC,YAAAA,KAAK,EAACL,QADuD;AAE7DC,YAAAA,QAAQ,EAACA;AAFoD,WAAlD,CAHf;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAFsC,CAAjC;AAgBP,IAAMK,WAAW,GAAGV,YAAY,CAACW,OAAb,CAAqB,MAArB,IAChBC,IAAI,CAACC,KAAL,CAAWb,YAAY,CAACW,OAAb,CAAqB,MAArB,CAAX,CADgB,GAEhB,IAFJ;AAIE,IAAMG,SAAS,GAAGd,YAAY,CAACW,OAAb,CAAqB,IAArB,IAChBC,IAAI,CAACC,KAAL,CAAWb,YAAY,CAACW,OAAb,CAAqB,IAArB,CAAX,CADgB,GAEhB,IAFF;AAIA,IAAMI,eAAe,GAAGf,YAAY,CAACW,OAAb,CAAqB,UAArB,IACtBC,IAAI,CAACC,KAAL,CAAWb,YAAY,CAACW,OAAb,CAAqB,UAArB,CAAX,CADsB,GAEtB,IAFF;AAIF,IAAMK,UAAU,GAAGnB,WAAW,CAAC;AAC7BoB,EAAAA,IAAI,EAAE,MADuB;AAE7BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,KAAK,EAAE,EADK;AAEZC,IAAAA,MAAM,EAAE,IAFI;AAGZX,IAAAA,KAAK,EAACC,WAHM;AAIZW,IAAAA,EAAE,EAACP,SAJS;AAKZV,IAAAA,QAAQ,EAACW;AALG,GAFe;AAU7BO,EAAAA,QAAQ,EAAC;AACPC,IAAAA,aAAa,EAAE,uBAACC,KAAD,EAAQC,MAAR,EAAoB;AACjCD,MAAAA,KAAK,CAACf,KAAN,GAAc,IAAd;AACAe,MAAAA,KAAK,CAACL,KAAN,GAAa,EAAb;AACAnB,MAAAA,YAAY,CAAC0B,UAAb,CAAwB,MAAxB;AACA1B,MAAAA,YAAY,CAAC0B,UAAb,CAAwB,IAAxB;AACA1B,MAAAA,YAAY,CAAC0B,UAAb,CAAwB,UAAxB;AACD;AAPM,GAVoB;AAoB7BC,EAAAA,aAAa,wDACV1B,QAAQ,CAAC2B,OADC,EACS,UAACJ,KAAD,EAAQC,MAAR,EAAmB;AACrCD,IAAAA,KAAK,CAACJ,MAAN,GAAe,SAAf;AACD,GAHU,mCAIVnB,QAAQ,CAAC4B,SAJC,EAIW,UAACL,KAAD,EAAQC,MAAR,EAAmB;AACvCD,IAAAA,KAAK,CAACJ,MAAN,GAAe,SAAf;AACAI,IAAAA,KAAK,CAACL,KAAN,GAAcM,MAAM,CAACK,OAArB;;AACA,QAAGL,MAAM,CAACK,OAAP,CAAeV,MAAf,IAAyB,GAA5B,EAAgC;AAC9BpB,MAAAA,YAAY,CAAC+B,OAAb,CAAqB,MAArB,EAA6BnB,IAAI,CAACoB,SAAL,CAAeP,MAAM,CAACK,OAAP,CAAeG,IAAf,CAAoBxB,KAAnC,CAA7B;AACAT,MAAAA,YAAY,CAAC+B,OAAb,CAAqB,IAArB,EAA2BnB,IAAI,CAACoB,SAAL,CAAeP,MAAM,CAACK,OAAP,CAAeG,IAAf,CAAoBC,GAAnC,CAA3B;AACAlC,MAAAA,YAAY,CAAC+B,OAAb,CAAqB,UAArB,EAAiCnB,IAAI,CAACoB,SAAL,CAAeP,MAAM,CAACK,OAAP,CAAeG,IAAf,CAAoB7B,QAAnC,CAAjC;AACH,KAJC,MAKE;AACF+B,MAAAA,KAAK,CAAC,mBAAD,CAAL;AACD;AACF,GAfY,mCAgBVlC,QAAQ,CAACmC,QAhBC,EAgBU,UAACZ,KAAD,EAAQC,MAAR,EAAmB;AACtCD,IAAAA,KAAK,CAACJ,MAAN,GAAe,QAAf;AACD,GAlBU;AApBgB,CAAD,CAA9B;IA4COG,a,GAAkBP,UAAU,CAACqB,O,CAA7Bd,a;AACP,OAAO,IAAMe,MAAM,GAAG,SAATA,MAAS;AAAA,SAAM,kBAAMpC,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAGxBiC,YAAAA,KAAK,CAAC,eAAD,CAAL;AAHwB,8CAIjBjC,QAAQ,CAACqB,aAAa,EAAd,CAJS;;AAAA;AAAA;AAAA;AAAA,8CAMjBjB,OAAO,CAACiC,KAAR,CAAc,aAAEC,OAAhB,CANiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAN;AAAA,CAAf;AASP,eAAexB,UAAU,CAACyB,OAA1B","sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport axios from \"axios\"\r\nimport { AsyncStorage } from 'react-native';\r\n\r\n//action for getting user\r\nexport const getUsers = createAsyncThunk(\r\n  \"users/getUsers\",\r\n  async ({username,password},dispatch, getState) => {\r\n   console.log(username)\r\n    try{\r\n    return await axios.post(\"http://localhost:8800/api/auth/login\",{\r\n      email:username,\r\n      password:password\r\n    })\r\n    }catch(err){\r\n     return err;\r\n    }\r\n  }\r\n);\r\n\r\n\r\nconst initialUser = AsyncStorage.getItem('user')\r\n  ? JSON.parse(AsyncStorage.getItem('user'))\r\n  : null\r\n\r\n  const initialId = AsyncStorage.getItem('id')\r\n  ? JSON.parse(AsyncStorage.getItem('id'))\r\n  : null\r\n\r\n  const initialUsername = AsyncStorage.getItem('username')\r\n  ? JSON.parse(AsyncStorage.getItem('username'))\r\n  : null\r\n//State\r\nconst usersSlice = createSlice({\r\n  name: \"user\",\r\n  initialState: {\r\n    users: [],\r\n    status: null,\r\n    email:initialUser,\r\n    id:initialId,\r\n    username:initialUsername\r\n  },\r\n  //normal reducers come here\r\n  reducers:{  \r\n    logoutSuccess: (state, action) =>  {\r\n      state.email = null;\r\n      state.users= [];\r\n      AsyncStorage.removeItem('user')\r\n      AsyncStorage.removeItem('id')\r\n      AsyncStorage.removeItem('username')\r\n    },\r\n  },\r\n  //reducers for thunk axios call come here\r\n  extraReducers: {\r\n    [getUsers.pending]: (state, action) => {\r\n      state.status = \"loading\";\r\n    },\r\n    [getUsers.fulfilled]: (state, action) => {\r\n      state.status = \"success\";\r\n      state.users = action.payload;\r\n      if(action.payload.status == 200){\r\n        AsyncStorage.setItem('user', JSON.stringify(action.payload.data.email))\r\n        AsyncStorage.setItem('id', JSON.stringify(action.payload.data._id))\r\n        AsyncStorage.setItem('username', JSON.stringify(action.payload.data.username))\r\n    }\r\n    else{\r\n      alert(\"wrong credentials\")\r\n    }\r\n  },\r\n    [getUsers.rejected]: (state, action) => {\r\n      state.status = \"failed\";\r\n    }\r\n  },\r\n});\r\n\r\n//logout this is a normal action so it must be defined first\r\n// Actions\r\nconst {logoutSuccess } = usersSlice.actions\r\nexport const logout = () => async dispatch => {\r\n  try {\r\n    // await api.post('/api/auth/logout/')\r\n    alert(\"logout sucees\")\r\n    return dispatch(logoutSuccess())\r\n  } catch (e) {\r\n    return console.error(e.message);\r\n  }\r\n}\r\nexport default usersSlice.reducer;"]},"metadata":{},"sourceType":"module"}